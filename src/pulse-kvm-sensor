#!/usr/bin/python
# -*- coding: UTF-8 -*-

import sys
sys.path.append("/opt/cloudstack/utils")

import mysql.connector
import datetime
import CloudStack
import config
import re
import libvirt
import json
from influxdb import InfluxDBClient
from xml.etree import ElementTree

cloudstack = CloudStack.Client(config.api, config.apikey, config.secret)
influxClient = InfluxDBClient('cs1-influx.z1.netpoint-dc.com', 8086, 'puls', 'pulsPassword', 'puls')

hosts = cloudstack.listHosts({'hypervisor': 'KVM'})

for csHost in hosts:
	conn = libvirt.open("qemu+tcp://root@%s:16509/system" % (csHost["ipaddress"],))
	if conn == None:
		raise Exception("Failed to open connection to qemu+tcp://root@%s:16509/system" % (csHost["ipaddress"],))
		exit(1)
		
	hostInfo = conn.getInfo()
	cpuFreq = hostInfo[3]
	
	domainIDs = conn.listDomainsID()
	if domainIDs == None:
		raise Exception('Failed to get a list of domain IDs')
		
	for domainID in domainIDs:
		domain = conn.lookupByID(domainID)
		tree = ElementTree.fromstring(domain.XMLDesc())
		vmHost = {}
		vmHost["hostCpuSpeed"] = csHost["cpuspeed"]
		vmHost["host"] = csHost["ipaddress"]
		vmHost["name"] = domain.name()
		vmHost["uuid"] = domain.UUIDString()
		state, maxmem, mem, cpus, cput = domain.info()
		vmHost["maxmem"] = maxmem
		vmHost["mem"] = mem
		vmHost["cpus"] = cpus
		vmHost["cputime"] = str(cput / 1000000000.)
		vmHost["isrunning"] = domain.isActive()
		vmHost["rss"] = long(domain.memoryStats()["rss"])
		
		vmHost["networkStatistics"] = {}
		netDevs = tree.findall('devices/interface')
		for intf in netDevs:
			dev = intf.find('target').get('dev')
			addr = intf.find('mac').get('address')
			stats = domain.interfaceStats(dev)
			vmHost["networkStatistics"][addr] = {
				"readBytes": 	long(stats[0]),
				"readPackets": 	long(stats[1]),
				"readErrors": 	long(stats[2]),
				"readDrops": 	long(stats[3]),
				"writeBytes": 	long(stats[4]),
				"writePackets": long(stats[5]),
				"writeErrors": 	long(stats[6]),
				"writeDrops": 	long(stats[7])}

		vmHost["diskStatistics"] = {}
		blockDevs = tree.findall('devices/disk')
		for disk in blockDevs:
			if disk.get('device') <> 'disk':
				continue
			dev = disk.find('target').get('dev')
			source = disk.find('source').get('file').split("/")[-1]
			stats = domain.blockStats(dev)
			vmHost["diskStatistics"][source] = {
				"readIOPS" :  long(stats[0]),
				"readBytes":  long(stats[1]),
				"writeIOPS":  long(stats[2]),
				"writeBytes": long(stats[3]),
				"ioErrors":   long(stats[4])}
				
		
		tags = {
			"id": vmHost["name"],
			"uuid": vmHost["uuid"],
			"host": vmHost["host"],
		}
		
		query = [
			{
				"measurement": "cpuTime",
				"tags": tags,
				"fields": {
					"cpuTime": float(vmHost["cputime"]),
					"cpus": int(vmHost["cpus"]),
					"cpuSpeed": int(vmHost["hostCpuSpeed"])
				}
			},
			{
				"measurement": "rss",
				"tags": tags,
				"fields": {
					"rss": long(vmHost["rss"]),
					"mem": long(vmHost["mem"]),
					"maxmem": long(vmHost["maxmem"])
				}
			},
		]
		
		for key in vmHost["networkStatistics"].keys():
			netTags = tags.copy()
			netTags["mac"] = key
				
			query.append({
				"measurement": "networkInterface",
				"tags": netTags,
				"fields": vmHost["networkStatistics"][key]
			})
		
		for key in vmHost["diskStatistics"].keys():
			diskTags = tags.copy()
			diskTags["device"] = key
			query.append({
				"measurement": "disk",
				"tags": diskTags,
				"fields": vmHost["diskStatistics"][key]
			})
		influxClient.write_points(query)

		#print json.dumps(vmHost)
		
	conn.close()

exit(0)


	

