#!/usr/bin/python
# -*- coding: UTF-8 -*-

# KVMHOST=qemu+tcp://root@10.252.1.35:16509/system ./virt-host-info

import sys
import datetime
import re
import libvirt
import json
import os
import traceback
from influxdb import InfluxDBClient
from xml.etree import ElementTree

csHost = os.environ["KVM_HOST"]
influxHost = os.environ["INFLUX_HOST"]
influxPort = int(os.environ["INFLUX_PORT"])
influxDB = os.environ["INFLUX_DB"]
influxUser = os.environ["INFLUX_USER"]
influxPassword = os.environ["INFLUX_PASSWORD"]

influxClient = InfluxDBClient(influxHost, influxPort, influxUser, influxPassword, influxDB)

try:
	conn = libvirt.open(csHost)
	if conn == None:
		raise Exception("Failed to open connection to %s" % (csHost,))
		exit(1)
		
	hostInfo = conn.getInfo()
	cpuFreq = hostInfo[3]
	
	domainIDs = conn.listDomainsID()
	if domainIDs == None:
		raise Exception('Failed to get a list of domain IDs')
		
	for domainID in domainIDs:
		domain = conn.lookupByID(domainID)
		tree = ElementTree.fromstring(domain.XMLDesc())
		vmHost = {}
		vmHost["host"] = csHost
		vmHost["name"] = domain.name()
		vmHost["uuid"] = domain.UUIDString()
		state, maxmem, mem, cpus, cput = domain.info()
		vmHost["maxmem"] = maxmem
		vmHost["mem"] = mem
		vmHost["cpus"] = cpus
		vmHost["cputime"] = str(cput / 1000000000.)
		vmHost["isrunning"] = domain.isActive()
		vmHost["rss"] = long(domain.memoryStats()["rss"])
		
		vmHost["networkStatistics"] = {}
		netDevs = tree.findall('devices/interface')
		for intf in netDevs:
			dev = intf.find('target').get('dev')
			addr = intf.find('mac').get('address')
			stats = domain.interfaceStats(dev)
			vmHost["networkStatistics"][addr] = {
				"readBytes": 	long(stats[0]),
				"readPackets": 	long(stats[1]),
				"readErrors": 	long(stats[2]),
				"readDrops": 	long(stats[3]),
				"writeBytes": 	long(stats[4]),
				"writePackets": long(stats[5]),
				"writeErrors": 	long(stats[6]),
				"writeDrops": 	long(stats[7])}

		vmHost["diskStatistics"] = {}
		blockDevs = tree.findall('devices/disk')
		for disk in blockDevs:
			if disk.get('device') <> 'disk':
				continue

			if disk.get('type') == 'file':
				dev = disk.find('target').get('dev')
				source = disk.find('source').get('file')
				stats = domain.blockStats(dev)
				vmHost["diskStatistics"]["file://%s" % (source,)] = {
					"readIOPS" :  long(stats[0]),
					"readBytes":  long(stats[1]),
					"writeIOPS":  long(stats[2]),
					"writeBytes": long(stats[3]),
					"ioErrors":   long(stats[4])}
				
		
		tags = {
			"vmId": vmHost["name"],
			"vmUuid": vmHost["uuid"],
			"vmHost": vmHost["host"],
		}
		
		query = [
			{
				"measurement": "cpuTime",
				"tags": tags,
				"fields": {
					"cpuTime": float(vmHost["cputime"]),
					"cpus": int(vmHost["cpus"])
				}
			},
			{
				"measurement": "rss",
				"tags": tags,
				"fields": {
					"rss": long(vmHost["rss"]),
					"mem": long(vmHost["mem"]),
					"maxmem": long(vmHost["maxmem"])
				}
			},
		]
		
		for key in vmHost["networkStatistics"].keys():
			netTags = tags.copy()
			netTags["mac"] = key
				
			query.append({
				"measurement": "networkInterface",
				"tags": netTags,
				"fields": vmHost["networkStatistics"][key]
			})
		
		for path in vmHost["diskStatistics"].keys():
			parts = path.split('/')
			diskTags = tags.copy()
			diskTags["image"] = parts[-1]
			diskTags["pool"] = parts[-2]
			query.append({
				"measurement": "disk",
				"tags": diskTags,
				"fields": vmHost["diskStatistics"][path]
			})
		# influxClient.write_points(query)
		print json.dumps(query, sort_keys=True, indent=4, separators=(',', ': '))
		print "\n"
		
	conn.close()

except Exception as e:
        traceback.print_exc(file=sys.stderr)
        
